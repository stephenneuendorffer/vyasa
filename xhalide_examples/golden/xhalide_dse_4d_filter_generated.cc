// [AI-CodeGen]:  Code generated by XHalide compiler for AI architecture with vector intrinsics.
#include<stdint.h>
#define XHALIDE_SRS_SHIFT 0


int conv(int16_t  * restrict _filter_buffer, int _filter_buffer_dim0_min, int _filter_buffer_dim0_extent, int _filter_buffer_dim0_stride, int _filter_buffer_dim1_min, int _filter_buffer_dim1_extent, int _filter_buffer_dim1_stride, int _filter_buffer_dim2_min, int _filter_buffer_dim2_extent, int _filter_buffer_dim2_stride, int _filter_buffer_dim3_min, int _filter_buffer_dim3_extent, int _filter_buffer_dim3_stride, int _filter_buffer_dim4_min, int _filter_buffer_dim4_extent, int _filter_buffer_dim4_stride, 
int16_t  * restrict _input_buffer, int _input_buffer_dim0_min, int _input_buffer_dim0_extent, int _input_buffer_dim0_stride, int _input_buffer_dim1_min, int _input_buffer_dim1_extent, int _input_buffer_dim1_stride, int _input_buffer_dim2_min, int _input_buffer_dim2_extent, int _input_buffer_dim2_stride, int _input_buffer_dim3_min, int _input_buffer_dim3_extent, int _input_buffer_dim3_stride, int _input_buffer_dim4_min, int _input_buffer_dim4_extent, int _input_buffer_dim4_stride, 
int16_t  * restrict _conv_buffer, int _conv_buffer_dim0_min, int _conv_buffer_dim0_extent, int _conv_buffer_dim0_stride, int _conv_buffer_dim1_min, int _conv_buffer_dim1_extent, int _conv_buffer_dim1_stride, int _conv_buffer_dim2_min, int _conv_buffer_dim2_extent, int _conv_buffer_dim2_stride, int _conv_buffer_dim3_min, int _conv_buffer_dim3_extent, int _conv_buffer_dim3_stride) {
 void *_0 = _conv_buffer;
 void * _conv = _0;
 int32_t _1 = _conv_buffer_dim0_min;
 int32_t _2 = _conv_buffer_dim0_stride;
 int32_t _3 = _conv_buffer_dim1_min;
 int32_t _4 = _conv_buffer_dim1_stride;
 int32_t _5 = _conv_buffer_dim2_min;
 int32_t _6 = _conv_buffer_dim2_stride;
 int32_t _7 = _conv_buffer_dim3_min;
 int32_t _8 = _conv_buffer_dim3_stride;
 void *_9 = _filter_buffer;
 void * _filter = _9;
 int32_t _10 = _filter_buffer_dim0_min;
 int32_t _11 = _filter_buffer_dim0_extent;
 int32_t _12 = _filter_buffer_dim0_stride;
 int32_t _13 = _filter_buffer_dim1_min;
 int32_t _14 = _filter_buffer_dim1_extent;
 int32_t _15 = _filter_buffer_dim1_stride;
 int32_t _16 = _filter_buffer_dim2_min;
 int32_t _17 = _filter_buffer_dim2_extent;
 int32_t _18 = _filter_buffer_dim2_stride;
 int32_t _19 = _filter_buffer_dim3_min;
 int32_t _20 = _filter_buffer_dim3_extent;
 int32_t _21 = _filter_buffer_dim3_stride;
 int32_t _22 = _filter_buffer_dim4_min;
 int32_t _23 = _filter_buffer_dim4_extent;
 int32_t _24 = _filter_buffer_dim4_stride;
 void *_25 = _input_buffer;
 void * _input = _25;
 int32_t _26 = _input_buffer_dim0_min;
 int32_t _27 = _input_buffer_dim0_extent;
 int32_t _28 = _input_buffer_dim0_stride;
 int32_t _29 = _input_buffer_dim1_min;
 int32_t _30 = _input_buffer_dim1_extent;
 int32_t _31 = _input_buffer_dim1_stride;
 int32_t _32 = _input_buffer_dim2_min;
 int32_t _33 = _input_buffer_dim2_extent;
 int32_t _34 = _input_buffer_dim2_stride;
 int32_t _35 = _input_buffer_dim3_min;
 int32_t _36 = _input_buffer_dim3_extent;
 int32_t _37 = _input_buffer_dim3_stride;
 int32_t _38 = _input_buffer_dim4_min;
 int32_t _39 = _input_buffer_dim4_extent;
 int32_t _40 = _input_buffer_dim4_stride;
 // produce conv
 int32_t _41 = _3 * _4;
 int32_t _42 = _7 * _8;
 int32_t _43 = _5 * _6;
 int32_t _44 = _42 + _43;
 int32_t _45 = _41 + _44;
 int32_t _46 = _45 + _1;
 for (int _conv_s1_n = 0; _conv_s1_n < 0 + 2; _conv_s1_n++)
 {
  int32_t _47 = _conv_s1_n * 204;
  int32_t _48 = _conv_s1_n * _8;
  int32_t _49 = _48 - _46;
  for (int _conv_s1_z = 0; _conv_s1_z < 0 + 2; _conv_s1_z++)
  {
   int32_t _50 = _conv_s1_z * 36;
   int32_t _51 = _conv_s1_z * _6;
   int32_t _52 = _51 + _49;
   for (int _conv_s1_y_y = 0; _conv_s1_y_y < 0 + 4; _conv_s1_y_y++)
   {
    int32_t _53 = _conv_s1_y_y * _4;
    int32_t _54 = _53 + _52;
    int32_t _55 = _conv_s1_y_y * 34;
    int32_t _56 = _55 + _47;
    for (int _conv_s1_x_x_x = 0; _conv_s1_x_x_x < 0 + 16; _conv_s1_x_x_x++)
    chess_prepare_for_pipelining chess_loop_range(16, 16)
    {
     v16acc48 out_0_acc;
     v64int16 loads_temporal_group_0 = undef_v64int16(); 
     int32_t _57 = _56 + _conv_s1_x_x_x;
     int32_t _58 = _57 * 32;
     loads_temporal_group_0 = upd_w(loads_temporal_group_0, 0, *(v16int16* ) (_input_buffer+_58+0)); 
     loads_temporal_group_0 = upd_w(loads_temporal_group_0, 1, *(v16int16* ) (_input_buffer+_58+16)); 
     v16int16 loads_spatial_group_0 = *(v16int16* ) (_filter_buffer+_50); 
     out_0_acc = mul16(loads_temporal_group_0, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 0, 0, 0, 1);
     loads_temporal_group_0 = upd_w(loads_temporal_group_0, 2, *(v16int16* ) (_input_buffer+_58+32)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_0, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 2, 0, 0, 1);
     out_0_acc = mac16(out_0_acc,loads_temporal_group_0, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 4, 0, 0, 1);
     v64int16 loads_temporal_group_1 = undef_v64int16(); 
     int32_t _59 = _58 + 544;
     loads_temporal_group_1 = upd_w(loads_temporal_group_1, 0, *(v16int16* ) (_input_buffer+_59+0)); 
     loads_temporal_group_1 = upd_w(loads_temporal_group_1, 1, *(v16int16* ) (_input_buffer+_59+16)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_1, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 6, 0, 0, 1);
     loads_temporal_group_1 = upd_w(loads_temporal_group_1, 2, *(v16int16* ) (_input_buffer+_59+32)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_1, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 8, 0, 0, 1);
     out_0_acc = mac16(out_0_acc,loads_temporal_group_1, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 10, 0, 0, 1);
     v64int16 loads_temporal_group_2 = undef_v64int16(); 
     int32_t _60 = _58 + 1088;
     loads_temporal_group_2 = upd_w(loads_temporal_group_2, 0, *(v16int16* ) (_input_buffer+_60+0)); 
     loads_temporal_group_2 = upd_w(loads_temporal_group_2, 1, *(v16int16* ) (_input_buffer+_60+16)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_2, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 12, 0, 0, 1);
     loads_temporal_group_2 = upd_w(loads_temporal_group_2, 2, *(v16int16* ) (_input_buffer+_60+32)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_2, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_0, 14, 0, 0, 1);
     int32_t _61 = _50 + 16;
     v16int16 loads_spatial_group_1 = *(v16int16* ) (_filter_buffer+_61); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_2, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 0, 0, 0, 1);
     v64int16 loads_temporal_group_3 = undef_v64int16(); 
     int32_t _62 = _58 + 1632;
     loads_temporal_group_3 = upd_w(loads_temporal_group_3, 0, *(v16int16* ) (_input_buffer+_62+0)); 
     loads_temporal_group_3 = upd_w(loads_temporal_group_3, 1, *(v16int16* ) (_input_buffer+_62+16)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_3, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 2, 0, 0, 1);
     loads_temporal_group_3 = upd_w(loads_temporal_group_3, 2, *(v16int16* ) (_input_buffer+_62+32)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_3, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 4, 0, 0, 1);
     out_0_acc = mac16(out_0_acc,loads_temporal_group_3, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 6, 0, 0, 1);
     v64int16 loads_temporal_group_4 = undef_v64int16(); 
     int32_t _63 = _58 + 2176;
     loads_temporal_group_4 = upd_w(loads_temporal_group_4, 0, *(v16int16* ) (_input_buffer+_63+0)); 
     loads_temporal_group_4 = upd_w(loads_temporal_group_4, 1, *(v16int16* ) (_input_buffer+_63+16)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_4, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 8, 0, 0, 1);
     loads_temporal_group_4 = upd_w(loads_temporal_group_4, 2, *(v16int16* ) (_input_buffer+_63+32)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_4, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 10, 0, 0, 1);
     out_0_acc = mac16(out_0_acc,loads_temporal_group_4, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 12, 0, 0, 1);
     v64int16 loads_temporal_group_5 = undef_v64int16(); 
     int32_t _64 = _58 + 2720;
     loads_temporal_group_5 = upd_w(loads_temporal_group_5, 0, *(v16int16* ) (_input_buffer+_64+0)); 
     loads_temporal_group_5 = upd_w(loads_temporal_group_5, 1, *(v16int16* ) (_input_buffer+_64+16)); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_5, 0, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_1, 14, 0, 0, 1);
     loads_temporal_group_5 = upd_w(loads_temporal_group_5, 2, *(v16int16* ) (_input_buffer+_64+32)); 
     int32_t _65 = _50 + 32;
     v16int16 loads_spatial_group_2 = *(v16int16* ) (_filter_buffer+_65); 
     out_0_acc = mac16(out_0_acc,loads_temporal_group_5, 2, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_2, 0, 0, 0, 1);
     out_0_acc = mac16(out_0_acc,loads_temporal_group_5, 4, 0x06040200, 0x0E0C0A08, 0x3210, loads_spatial_group_2, 2, 0, 0, 1);
     int32_t _66 = _conv_s1_x_x_x * 16;
     int32_t _67 = _66 + _54;
     *(v16int16*)(_conv_buffer+_67) = srs(out_0_acc, XHALIDE_SRS_SHIFT);
    } // for _conv_s1_x_x_x
   } // for _conv_s1_y_y
  } // for _conv_s1_z
 } // for _conv_s1_n
 return 0;
}

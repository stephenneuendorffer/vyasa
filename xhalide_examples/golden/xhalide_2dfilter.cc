// [AI-CodeGen]:  Code generated by XHalide compiler for AI architecture with vector intrinsics.
#include<stdint.h>
#define XHALIDE_SRS_SHIFT 0


int conv_opt(int32_t  * restrict _filter_buffer, int _filter_buffer_dim0_min, int _filter_buffer_dim0_extent, int _filter_buffer_dim0_stride, int _filter_buffer_dim1_min, int _filter_buffer_dim1_extent, int _filter_buffer_dim1_stride, 
int32_t  * restrict _input_buffer, int _input_buffer_dim0_min, int _input_buffer_dim0_extent, int _input_buffer_dim0_stride, int _input_buffer_dim1_min, int _input_buffer_dim1_extent, int _input_buffer_dim1_stride, 
int32_t  * restrict _conv_opt_buffer, int _conv_opt_buffer_dim0_min, int _conv_opt_buffer_dim0_extent, int _conv_opt_buffer_dim0_stride, int _conv_opt_buffer_dim1_min, int _conv_opt_buffer_dim1_extent, int _conv_opt_buffer_dim1_stride) {
 void *_0 = _conv_opt_buffer;
 void * _conv_opt = _0;
 int32_t _1 = _conv_opt_buffer_dim0_min;
 int32_t _2 = _conv_opt_buffer_dim0_stride;
 int32_t _3 = _conv_opt_buffer_dim1_min;
 int32_t _4 = _conv_opt_buffer_dim1_stride;
 void *_5 = _filter_buffer;
 void * _filter = _5;
 int32_t _6 = _filter_buffer_dim0_min;
 int32_t _7 = _filter_buffer_dim0_extent;
 int32_t _8 = _filter_buffer_dim0_stride;
 int32_t _9 = _filter_buffer_dim1_min;
 int32_t _10 = _filter_buffer_dim1_extent;
 int32_t _11 = _filter_buffer_dim1_stride;
 void *_12 = _input_buffer;
 void * _input = _12;
 int32_t _13 = _input_buffer_dim0_min;
 int32_t _14 = _input_buffer_dim0_extent;
 int32_t _15 = _input_buffer_dim0_stride;
 int32_t _16 = _input_buffer_dim1_min;
 int32_t _17 = _input_buffer_dim1_extent;
 int32_t _18 = _input_buffer_dim1_stride;
 // produce conv_opt
 int32_t _19 = _3 * _4;
 int32_t _20 = _19 + _1;
 for (int _conv_opt_s1_y_y = 0; _conv_opt_s1_y_y < 0 + 16; _conv_opt_s1_y_y++)
 {
  int32_t _21 = _conv_opt_s1_y_y * 34;
  int32_t _22 = _conv_opt_s1_y_y * _4;
  int32_t _23 = _22 - _20;
  for (int _conv_opt_s1_x_x_x = 0; _conv_opt_s1_x_x_x < 0 + 32; _conv_opt_s1_x_x_x++)
  chess_prepare_for_pipelining chess_loop_range(32, 32)
  {
   v8acc80 out_0_acc;
   v16int32 loads_temporal_group_0 = undef_v16int32(); 
   int32_t _24 = _21 + _conv_opt_s1_x_x_x;
   int32_t _25 = _24 * 8;
   loads_temporal_group_0 = upd_w(loads_temporal_group_0, 0, *(v8int32* ) (_input_buffer+_25+0)); 
   v8int32 loads_spatial_group_0 = *(v8int32* ) (_filter_buffer+0); 
   out_0_acc = lmul8(loads_temporal_group_0, 0, 0x76543210, loads_spatial_group_0, 0, 0);
   loads_temporal_group_0 = upd_w(loads_temporal_group_0, 1, *(v8int32* ) (_input_buffer+_25+8)); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_0, 1, 0x76543210, loads_spatial_group_0, 1, 0);
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_0, 2, 0x76543210, loads_spatial_group_0, 2, 0);
   v16int32 loads_temporal_group_1 = undef_v16int32(); 
   int32_t _26 = _25 + 272;
   loads_temporal_group_1 = upd_w(loads_temporal_group_1, 0, *(v8int32* ) (_input_buffer+_26+0)); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_1, 0, 0x76543210, loads_spatial_group_0, 3, 0);
   loads_temporal_group_1 = upd_w(loads_temporal_group_1, 1, *(v8int32* ) (_input_buffer+_26+8)); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_1, 1, 0x76543210, loads_spatial_group_0, 4, 0);
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_1, 2, 0x76543210, loads_spatial_group_0, 5, 0);
   v16int32 loads_temporal_group_2 = undef_v16int32(); 
   int32_t _27 = _25 + 544;
   loads_temporal_group_2 = upd_w(loads_temporal_group_2, 0, *(v8int32* ) (_input_buffer+_27+0)); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_2, 0, 0x76543210, loads_spatial_group_0, 6, 0);
   loads_temporal_group_2 = upd_w(loads_temporal_group_2, 1, *(v8int32* ) (_input_buffer+_27+8)); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_2, 1, 0x76543210, loads_spatial_group_0, 7, 0);
   v8int32 loads_spatial_group_1 = *(v8int32* ) (_filter_buffer+8); 
   out_0_acc = lmac8(out_0_acc,loads_temporal_group_2, 2, 0x76543210, loads_spatial_group_1, 0, 0);
   int32_t _28 = _conv_opt_s1_x_x_x * 8;
   int32_t _29 = _28 + _23;
   *(v8int32*)(_conv_opt_buffer+_29) = srs(out_0_acc, XHALIDE_SRS_SHIFT);
  } // for _conv_opt_s1_x_x_x
 } // for _conv_opt_s1_y_y
 return 0;
}
